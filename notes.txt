Algorithm func (L)
	Input: A list L storing distinct integers.
	Output: Sum of all even numbers in the list except 2.

sum <= 0
n <= size of L
for i <= 0 to n - 1 do
	if L[i] mod 2 = 0 and L[i] != 2 then
		sum <= sum + L[i]

return sum

Chapter 1

Roster Notation:
A = {2, 4, 6, 8}
Set Builder Notation
B = {x in Z: x % 2 == 0, x > 0} (Z: all integer)

S = {a, b}

Membership in Set:

a in S
a, b in S
c not in S

{1, 2, 3} == {3, 1, 2}
{1, 1, 2, 3} == {1, 2, 3}
{1, 3, 5} != {1, 4, 5}

B in A if all elem in B are in A
let A = [1, 2, 3, 4, 5];
let subsets_in = [
	[1, 2, 3], //true
]

subset: x contained in A
{3, 1, 2} == {1, 2, 3, 4, 5}
{3, 3, 1, 2} == {1, 2, 3}
3 != {1, 2, 3} // not set
{1, 2, 3} == 1, 2, 3
proper subset
{1, 2} == {1, 2, 3} // not required to have all elems
{1} == {1, 2, 3}
{1, 2 ,3} != {4, 1, 2 ,3 }
3 != {1, 2, 3}

if one is a subset, then it CANNOT be a proper subset

cardinality: number of unique elems

N: x >= 0
Z: parseInt
Q: a/b => 1/2, 2/3, 3/4,... 5.23, ...
R: pi, sqrt(2)


Complex: a + bi
Imaginary: ai

Z+, R-,...

S = NULL

empty set is subset of every set

empty set is subset of itself

function is_subset(set1, set2) { // all elements in set1 is in set2
	for (let i = 0; i < set1.length; ++ i) {
		for (let j = 0; i < set2.length; ++ j) {

		}
	}
}

set can represent using venn diagrams

union: {1, 2, 3, 4} + {3, 4, 5, 6} = {1, 2, 3, 4, 5, 6} ( U )
intersect: {1, 2, 3, 4} and {3, 4, 5, 6} = {3, 4} ( U but more like ^ )
{1, 2} and {3, 4} = NULL (a.k.a disjoint)
diff: {3, 4, 5, 6} - {1, 2, 3, 4} = {5, 6}
	 {1, 2, 3, 4} - {3, 4, 5, 6} = {1, 2}
xor (symmetric diff): {1, 2, 3, 4} xor {3, 4, 5, 6} = {1, 2, 5, 6}
complement (not exist in a set): {2, 3, 4, 5} comp {4, 5, 6}, {1, 7} = {1, 6, 7}

partition (sum)
	{x in Z: 3 <= x <= 9}
	B {3, 4, 5} + C {6, 7, 8} + D {9} + E {3, 4, 5, 6, 7}

cross
	{2, -3, 0, 1.5} x {3, 1, 0, -2.5}
	{(0, 0), (0, 1),...} // all possible pair
	A{} x B{} x C{} = {(x, x, x), (x, x, x), ...} // now triple
	{1, 2, 3} x {4, 5} = {(1, 4), (1, 5), (2, 4), (2, 5), ...}

string notation: A{x, y} x B{a, b} = {xa, xb, ya, yb} // no ()

power set (S)
S = {1, 2 ,3}
P(S) = {
	NULL,
	{1}, {2}, {3},
	{1, 2}, {1, 3}, {2, 3},
	{1, 2, 3}
}

tuple != set ( () != {} )
(3, 6, 9) == (3, 6, 9) != (3, 9, 6)
(1, 2, 3) != (1, 1, 2, 3) // allow dupe
(2**2, 3**2) == (4, 9)

  1
 / \
/   \
|   | M_i
|   |
i = 3

A U S
{x: x in A OR x in S} (OR here, NOT AND)

Universal set: U

A = {a, b}   B = {b, c}
P(A) ∩ P(B)

{NULL, {a}, {b}, {a, b}} - {NULL, {b}, {c}, {b, c}} = {{a}, {a, b}}

A = {tall, grande, venti}
B = {foam, no-foam}
C = {non-fat, whole}


function sss(a) {
	let ret = [];
	for (let i = 0; i < a.length; ++ i) {
		let e = a[i];
		for (let j = 0; j < e.length; ++ j) {
			let temp = [];
			for (let k = 0; k < ) {

			}
			ret.push(temp);
		}
	}
}

A × B × C

{tall}

B × A × C
B × C using roster notation.

{0x: x ∈ {0, 1}2}

{00, 01, 10, 11} {000, 001, 010, 011}

{0x: x ∈ B}, where B = {0, 1}0 ∪ {0, 1}1 ∪ {0, 1}2

{NULL, 00, 01, 10, 11}

{xy: x ∈ {aa, ab} and y ∈ {a} ∪ {a}2}

{a} ∪ {a}2 {aa}

{a, aa} {aaa, aaaa, aba, abaa}

Chapter 2

Logic

T F
non-const value cannot be T or F
p q r s for vars


Sorted by operator pre
~p (NOT)
p ^ q (AND)
p ∨ q (OR)
p ⊕ q (XOR)
p -> q (if p then q)
p <-> q (XNOR) (a.k.a biconditional) ()

if then:
T | T > T
T | F > F
F | T > T
F | F > T

T | T > T
T | F > F
F | F > T ??

T | T > T
T | F > F
F | T > T ??

https://www.allaboutcircuits.com/technical-articles/universal-logic-gates/

one of q or p is true (xor)

(p v q) ^ ~(p ^ q) xor

Tautology: always true
Contradction: always false

converse        q -> p
contrapositive ~q -> ~p
inverse        ~p -> ~q

If rain, then close window.
	If close window, then rain.
	If don't close window, then not rain.
	Don't close window if not rain.

        De Morgan law
     ~(p ^ q) = ~p V ~q
     ~(p V q) = ~p ^ ~q

(p -> q) -> r ~= p -> (q -> r)

          Laws:
     p -> q = ~p v q
    p <-> q = (p -> q) ^ (q -> p)

p V (p ^ q) = p ^ (p V q) = p

(p v q) v r = p v (q v r)
(p ^ q) ^ r = p ^ (q ^ r)

p v (q ^ r) = (p v q) ^ (p v r)
p ^ (q v r) = (p ^ q) v (p ^ r)


(p v ~q) ^ (~p v ~q) = ~q

(p || !q) && (!p || !q)
(p || !q) && !(p && q)
!q || (p && !p)
~q || F
!q

p -> (p v q)
~p || (p || q)
(~p || p) || q
T || q
T

(p v q) ^ (p v r) ^ (q v r)
q ^ r v p ^ (q v r)

q ^ r ^ p v (q v r)

(p ∧ ¬q) ∨ (p ∧ q) = p ∧ (¬q ∨ q) ?????

var res = [];
function test(a, b, c) {
	return (a || b) && (a || c) && (b || c);
}
for (let i = 0; i < Math.pow(2, 3); ++ i) {
	res.push(test(i >> 2 & 1, i >> 1 & 1, i & 1));
}
console.log(res);

Preposition: always constant value
Predicates: how much variables a statement can be

R(x) is predicate x > 5

Preposition:
R(23) is true, R(-5) is false

∀: all
∃: any

let x ∈ R
∀x (x^2 > x) -> false
             -> counter example

∀y ∈ 2^+ (1/y <= y) True

Every freshman at the College is taking CS 101

Q(x, y) = student x is taking course y

∀s ∈ College, Q(s, CS101)

P(x) = x is lion, Q(x) = x is fierce, R(x) = x drinks coffee

Some lions do not drink coffee
∃x, (P(x) ^ ~R(x))

All lion are fierce
∀x, (P(x) -> R(x))

~∀x P(x) = ∃x ~P(x)
∀x ~P(x) = ~∃x P(x)

Argument => sequence of proposition
g: good golf
c: wind calm
d: weather dry

g -> (c v d)
c ^ d
g

g c d | c ^ d | g -> (c v d) | g |
T T T |   T   |       T      | T | T   X
T T F |   T   |       T      | F | T    
T F T |   T   |       T      | T | F   X
T F F |   T   |       T      | F | F    
F T T |   T   |       T      | F | T    
F T F |   T   |       T      | F | T    
F F T |   F   |       F      | F | F    
F F F |   F   |       T      | F | F    

=> Invalid

Rule of inference

~p ^ q
r -> p
~r -> s
s -> t
-------
∴ t

Basically this is just a fancy way of "sum" all "and"

~q
p -> q
--------
∴ ((p → q) ∧ ¬q) → ¬p

~p ^ q (premise)
~p (simplication 1)
r -> p (premise)
~r (modus tollens 2, 3)
~r -> s (premise)
s (modus tollens 4, 5)
s -> t (premise)
t (modus tollens 6, 7)

p v f
~t -> ~p  (~~t v ~p) (~p v t) -> (f v t) (t v f)
t -> b    (~t v b) -> (f v b)
~f
∴ b

p -> q  (~p v q) (q v ~p)
q -> r  (~q v r) -> (~p v r) (p -> r)
~r      -> p
∴ p

function

f(x)

each element in X is assigned one value and only one

f(x) as set of ordered pair

range is what f(x) can reach
target is all possible result

3(2x+4)^2+6(2x+4)+12
3(2x+4)^2+12x+24+12

one-to-one: every input will have different output
onto: A->B, as every possible value in B MUST BE USED by A

bijection: both

piecewise is not invertible ?

function gen (a, c = 0, ret = [], curr = []) {
	for (let i = 0; i < a[c].length; ++ i) {
		curr[c] = a[c][i];
		if (c === a.length - 1) ret.push([].concat(curr));
		else gen (a, c + 1, ret, curr);
	}
	return ret;
}

console.log(gen([[123, 234], [345, 456, 567], [678, 789]]));

function DFS (arr) {
	
}

predecessor vs sucessor:
+---+   +---+
| P +-->| S |
+---+   +---+

P is the predecessor of S
S is the sucessor of P

indegree: 0 (no predecessor)

(unit/ currency conversion) (undirected)
(pathfinding) (directed)
(URL) (directed)
(trangle mesh modeling (cloth)) (undirected)
(electronic circuit) (directed)

(directory) (more like a tree)
(triangulation) (undirected)

https://codepen.io/Blindman67/pen/ZJYejP (cloth)

zero-one matrix
unit matrix 
[
	1, 0, 0
	0, 1, 0
	0, 0, 1
]

basic matrix operation

transpose
[
0, 1, 1
0, 0, 1
]

[
0, 0
1, 0
1, 1
]

square matrix

reflective: every a ∈ A, aRA (point to itself)
symmetric: aRb then bRa (1, 2) (2, 1) (point to each other)
transitive: aRb & bRc, then aRc (point twithh order)
						(1, 2) (2, 3) -> (1, 3)
						(1, 2) (2, 1) -> (1, 1)

add anti, then it opposite

(1, 1) (2, 2) (3, 3) (4, 4)
if it ONLY reflective, then it BOTH symmetric and anti-symmetric
	also transitive

if all 3, then equivalent relation

R = {(), (), ()}

Equivalent class

{}
{}
{}

(000) (001) (010) (011) (100) (101) (110) (111)

(000) (001) (010) (100)

(111) (110) (101) (011)

function f() {

	return f();
}

permutation: how many choice
can and cannot be duplicated
5!

perm(a, b) = a! / b!

combination: how many possible choice UNORDERED

comb(a, b) = n! / (n - r)! r!

//return Math.nPr(num, num);
Math.nPr = function (num1, num2) {
	let result = 1;
	for (let i = 0; i < num2; ++i)
		result *= num1 - i;
	return result;
};
Math.nCr = function (num1, num2) {
	let result = 1;
	for (let i = 0; i < num2; ++i)
		result *= (num1 - i) / (i + 1);
	return result;
};
Math.fact = function (num) { // factorial
	if (num < 2) return 1;
	let result = 1;
	for (let i = 1; i <= num; ++i)
		result *= i;
	return result;
};
Math.nRr = function (num1, num2) {
	return Math.nCr(num1 + num2 - 1, num2 - 1);
};
Math.nIr = function (num1, arr) {
	let result = 1;
	for (let i = 0; i < arr.length; ++i)
		result *= Math.fact(arr[i]);
	return Math.fact(num1) / result;
};
function nIrWord (word) {
	let data = [];
	data.length = 26;
	data.fill(0);
	word = word.toLowerCase();
	for (let i = 0; i < word.length; ++i) ++ data[word.charCodeAt(i) - 97];
	return Math.nIr(word.length, data);
}
function isInd (num1, num2, num3) {
	let mul = num1 * num2;
	return num3 === mul && 
		mul / num2 === num1 &&
		mul / num1 === num2;
}

function q1(num) {
    console.log(Math.nPr(num, num));
    console.log(Math.nPr(num - 1, num - 1) * 2);
    console.log(Math.nPr(num - 2, num - 2) * 2);
    console.log(Math.fact(num) - ((num - 4) * Math.fact(num - 2) * 2 + (num - 4) * (num - 2 - 3) * Math.fact(num - 2)));
}
function q2(num1, num2) {
    console.log(Math.nCr(num1, num2));
    console.log(Math.nPr(num1, num2));
}
function q3 (num1, num2, num3, num4) {
    var data = [];
    data[0] = Math.nCr(num1, num4);
    data[1] = data[0] - 1;
    data[2] = Math.nCr(num2, num4 / 2) * Math.nCr(num3, num4 / 2);
    return data;
}
function q4 (num1, num2) {
    return Math.nCr(num1, num2) * (num2 - 1) ** (num1 - num2);
}
function q5 (num1, num2) {
    return Math.nPr(num1, num2);
}
function q6 (boy, girl) {
    return Math.fact(boy) * Math.fact(girl);
}
function q7 (len, one, zero) {
    return Math.nCr(len, one) + Math.nCr(len, zero);
}
function q8 (dishes) {
    return Math.nPr(dishes, 7);
}
function q9 (len) {
    let data = [];
    data[0] =  10 ** len / len;
    data[1] = Math.nPr(5, 2) * Math.nPr(5, 1) ** 3; // wrong, test case: (len == 4 => 2500, 1400) (len == 8 => 25000000, 504000)
    return data;
}
function q10 (len, dupe) {
    let data = [],
        t1 = 2 ** len,
        t2 = 2 ** (len - 3) + 2 ** (len - 4),
        t3 = Math.nCr(len, dupe);
    data[0] = t1 - t3;
    data[1] = t2;
    data[2] = t1 - (Math.nCr(len - 3, dupe) * 2 ** 7) + Math.nCr(len - 4, dupe); // wrong
    data[3] = t1 - (t2 + data[0]); // wrong
    data[4] = t1 - (Math.fact(len - 2) * 2 - Math.fact(len - 4)); // wrong
    return data;
}

a: >= 1
b: {bg, gb, gg}

a /\ b: bg, gb

P(a|b) = |a /\ b| / |a| = 1 / 3
P(a|b_) = |a /\ b_| / |a| = 2 / 3

P(B1/\B2) = P(B1)P

A: all prob dice
B: A+B=7

A/\B: {16, 61, 25, 52, 34, 43}

1/4
2/5

P(A/\B) = P(A) * P(B)

P(A|B) = |A/\B| / |B|
P(B|A) = |A/\B| / |A|

P(A/\B) = P(A)P(A|B) = P(A) * |A/\B| / |B|

P(A|B) = P(B|A)P(A) / (P(B|A)P(A) + P(B|A_)P(A_))

P(A\/B) = P(A) + P(B) - P(A/\B)

1 / 6   3 / 4 , 1 / 4
2 / 6   3 / 5 , 2 / 5
3 / 6   9 / 20 , 11 / 20
  G       R        B
P(R) = P(G1/\R) + P(G2/\R) + P(G3/\R)
		= P(G1)P(G1|R) + P(G2)P(G2|R) + P(G3)P(G3|R)
		= 1/6*3/4 + ...

Bag3 if marble is blue => P(B3|B)

1/2 12/19 7/19
1/2 8/27 19/27
      B    W

if marble is blue, prob it came from first bag
1/2*12/19/(1/2*12/19+1/2*8/27)

1/2*12/19+1/2*8/27

5/1000     97/100 3/100
995/1000   99/100 1/100
   D         P      N

have disease & positive

5/1000*97/100/(5/1000*97/100+5/1000*3/100)

P(D = 5/1000
P(T|D_) = 3/100
P(T_|D) = 1/100

P(T|D) = 1 - P(T_|D)

P(T|D) = P(D/\T)/P(T) = P(D)P(T|D)/(P(D)P(T|D)+P(D_)P(T|D_))
	= 5/1000*99/100/(5/1000*99/100+995/1000*3/100)

(function() {
	let Humanity = {};

	Humanity.choice = function(name, num, child) {
		return {
			val: {
				name: name,
				child: child,
			},
			num: num,
		};
	};

	let population = 10000000000;

	/*
	Rule:
	- Human must be 30% ((1000 + 1000 + 1000 + 750 + 450 + 750 + 250 + 250 + 250) * 0.3)
	*/

	var species = [
		Humanity.choice("human", 2450),
		Humanity.choice("beast", 1000, [ //Should include bird?
			Humanity.choice("common", 1000, [ //Can be both meat or plant
				Humanity.choice("cat", 1000),
				Humanity.choice("dog", 1000),
				Humanity.choice("monkey", 600),
				Humanity.choice("fox", 700),
				Humanity.choice("horse", 600),
				Humanity.choice("rabbit", 700),
				Humanity.choice("civet", 500),
				Humanity.choice("bear", 500),
				Humanity.choice("rodent", 400), //May squirrel go here ?
				Humanity.choice("bat", 400) //May include vampire...
			]),
			Humanity.choice("ruminantia", 600, [ //Horned species
				Humanity.choice("goat", 1000),
				Humanity.choice("buffalo", 700), //Bovinae for reference
				Humanity.choice("sheep", 1000),
				Humanity.choice("cow", 500)
			]),
			Humanity.choice("bird", 600) //Include chicken
		]),
		Humanity.choice("marine", 1000, [ //May include mollusca
			Humanity.choice("fish", 1000), //Mermaid (Teleostei), one fish tail replace legs or have legs with fins between toes and fingers or separate tail
			Humanity.choice("eel", 650), //Elopomorpha for reference
			Humanity.choice("squid", 450), //Cephalopod for reference
			Humanity.choice("snail", 200), //Gastropoda for reference, Maybe include pearl,...
			Humanity.choice("shark", 200) //Chondrichthyes for reference
		]),
		Humanity.choice("plant", 1000, [
			Humanity.choice("land", 1000, [
				Humanity.choice("flower", 1000),
				Humanity.choice("gymnosperm", 400)
			]),
			Humanity.choice("aquatic", 500),
			Humanity.choice("fungi", 250)
		]),
		Humanity.choice("reptile", 750, [ //Like lizard, dragon,...
			Humanity.choice("lizard", 1000),
			Humanity.choice("snake", 1000),
			Humanity.choice("crocodile", 300),
			Humanity.choice("turtle", 400),
			Humanity.choice("dragon", 50)
		]),
		Humanity.choice("amphibians", 450, [ //Frog, worm,...
			Humanity.choice("frog", 1000),
			Humanity.choice("salamander", 1000),
			Humanity.choice("worm", 300)
		]),
		Humanity.choice("arthropod", 750, [ //Many legs like shrimp, insects, bugs, spiders,...
			Humanity.choice("insect", 1000, [
				Humanity.choice("endopterygota", 1000, [
					Humanity.choice("lepidoptera", 1000), //Butterfly <3
					Humanity.choice("hymenoptera", 400), //Bee and ant... >_>
					Humanity.choice("diptera", 200), //Those fucking annoying flies
					Humanity.choice("caddisfly", 600),
					Humanity.choice("beetle", 600),
					Humanity.choice("megaloptera", 600),
					Humanity.choice("neuroptera", 600)
				]),
				Humanity.choice("exopterygota", 50)
			]),
			Humanity.choice("spider", 500), //Araneae for reference
			Humanity.choice("crustacean", 300, [
				Humanity.choice("shrimp", 1000),
				Humanity.choice("crab", 1000)
			]),
			Humanity.choice("scorpion", 200),
			Humanity.choice("centipede", 200) //Myriapoda for reference
		]),
		Humanity.choice("supernatural", 250, [ //Demon, angels, ghost, fairies, undead...
			Humanity.choice("angel", 1000),
			Humanity.choice("demon", 1000),
			Humanity.choice("fairy", 600),
			Humanity.choice("youkai", 600), //Include oni
			Humanity.choice("spirit", 400), //ghost-like stuff, not youkai, include jinn
			Humanity.choice("undead", 400)
			//Add ghoul? Half dead half alive...
		]),
		Humanity.choice("demi", 250, [ //Mostly things like rpg species like drawf, elves, goes here...
			Humanity.choice("elf", 1000),
			Humanity.choice("drawf", 1000),
			Humanity.choice("gnome", 400),
			Humanity.choice("orge", 400),
			Humanity.choice("goblin", 400),
			Humanity.choice("orc", 200),
			Humanity.choice("troll", 200),
			Humanity.choice("giant", 100),
			Humanity.choice("kobold", 50)
		]),
		Humanity.choice("material", 250) //Robot, doll or solid stuff goes here
	];

	let gender = [
		Humanity.choice("male", 50),
		Humanity.choice("female", 50)
	];

	let power = [{

	}];

	let magic = [{

	}];

	Humanity.generate = function() {
		let result = {},
			tempSpecies = new Probability().set(species, 0),
			tempResult;
		while (true) {
			tempResult = tempSpecies.pick();
			if (Array.isArray(tempResult.child)) {
				tempSpecies = new Probability().set(tempResult.child, 0);
			} else {
				break;
			}
		}
		return tempResult.name;
	};

	window.Humanity = Humanity;
})();

(function() {
	function Probability() {}

	let P = Probability.prototype;

	P.type = 0; //0: sum, 1: 0-1

	P.random = Math.random;

	P.set = function(data, type) {
		this.data = data;
		this.type = type;
		let prev = 0;
		switch (type) {
			case 1:
				{
					this._sum = 1;
					for (let i = 0; i < data.length; i++) {
						data[i]._chance = data[i].num;
					}
				}
				break;
			default:
				{
					this._sum = 0;
					for (let i = 0; i < data.length; i++) {
						this._sum += data[i].num;
					}
					for (let i = 0; i < data.length; i++) {
						data[i]._chance = data[i].num / this._sum;
					}
				}
		}
		for (let i = 0; i < data.length; i++) {
			data[i]._min = prev;
			prev += data[i]._chance;
			data[i]._max = prev;
		}
		return this;
	};

	P.pick = function() {
		let rand = this.random();
		for (let i = 0; i < this.data.length; i++) {
			if (this.data[i]._min <= rand && rand < this.data[i]._max) {
				return this.data[i].val;
			}
		}
	};

	window.Probability = Probability;
})();

let result = {};
let track = document.getElementById("track");
let population = 0;

function* main() {
	for (let j = 0; j < 1000000; j++) {
		population += 10000;
		for (let i = 0; i < 10000; i++) {
			let temp = Humanity.generate();
			if (!result[temp]) {
				result[temp] = 1;
			} else {
				result[temp] += 1;
			}
		}
		let temp = "";

		var sortable = [];
		for (let key in result) {
			sortable.push([key, result[key], result[key] / population * 100]);
		}

		sortable.sort(function(a, b) {
			return -(a[1] - b[1]);
		});

		for (let k = 0; k < sortable.length; k++) {
			var s = sortable[k];
			temp += `${s[0]}: ${s[1]} | ${s[2].toFixed(6)}%<br/>`;
		}

		track.innerHTML = temp;
		yield;
	}
}
let generator = main();

function loop() {
	generator.next();
	window.requestAnimationFrame(loop);
}
loop();
